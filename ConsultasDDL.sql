-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.

-- Inicia una transacción para agrupar todas las operaciones en una sola unidad atómica
BEGIN;

-- Crea la tabla "Album" si no existe, con columnas para ID, título y el artista asociado
CREATE TABLE IF NOT EXISTS public."Album"
(
    "AlbumId" integer NOT NULL,
    "Title" character varying(160) COLLATE pg_catalog."default" NOT NULL,
    "ArtistId" integer NOT NULL,
    CONSTRAINT "PK_Album" PRIMARY KEY ("AlbumId")
);


-- Crea la tabla "Artist" si no existe, con columnas para ID y nombre del artista
CREATE TABLE IF NOT EXISTS public."Artist"
(
    "ArtistId" integer NOT NULL,
    "Name" character varying(120) COLLATE pg_catalog."default",
    CONSTRAINT "PK_Artist" PRIMARY KEY ("ArtistId")
);

-- Crea la tabla "Customer" (clientes) con información personal y un representante de soporte
CREATE TABLE IF NOT EXISTS public."Customer"
(
    "CustomerId" integer NOT NULL,
    "FirstName" character varying(40) COLLATE pg_catalog."default" NOT NULL,
    "LastName" character varying(20) COLLATE pg_catalog."default" NOT NULL,
    "Company" character varying(80) COLLATE pg_catalog."default",
    "Address" character varying(70) COLLATE pg_catalog."default",
    "City" character varying(40) COLLATE pg_catalog."default",
    "State" character varying(40) COLLATE pg_catalog."default",
    "Country" character varying(40) COLLATE pg_catalog."default",
    "PostalCode" character varying(10) COLLATE pg_catalog."default",
    "Phone" character varying(24) COLLATE pg_catalog."default",
    "Fax" character varying(24) COLLATE pg_catalog."default",
    "Email" character varying(60) COLLATE pg_catalog."default" NOT NULL,
    "SupportRepId" integer,
    CONSTRAINT "PK_Customer" PRIMARY KEY ("CustomerId")
);

-- Crea la tabla "Employee" (empleados) con datos personales y jerarquía organizacional
CREATE TABLE IF NOT EXISTS public."Employee"
(
    "EmployeeId" integer NOT NULL,
    "LastName" character varying(20) COLLATE pg_catalog."default" NOT NULL,
    "FirstName" character varying(20) COLLATE pg_catalog."default" NOT NULL,
    "Title" character varying(30) COLLATE pg_catalog."default",
    "ReportsTo" integer,
    "BirthDate" timestamp without time zone,
    "HireDate" timestamp without time zone,
    "Address" character varying(70) COLLATE pg_catalog."default",
    "City" character varying(40) COLLATE pg_catalog."default",
    "State" character varying(40) COLLATE pg_catalog."default",
    "Country" character varying(40) COLLATE pg_catalog."default",
    "PostalCode" character varying(10) COLLATE pg_catalog."default",
    "Phone" character varying(24) COLLATE pg_catalog."default",
    "Fax" character varying(24) COLLATE pg_catalog."default",
    "Email" character varying(60) COLLATE pg_catalog."default",
    CONSTRAINT "PK_Employee" PRIMARY KEY ("EmployeeId")
);

-- Crea la tabla "Genre" (géneros musicales)
CREATE TABLE IF NOT EXISTS public."Genre"
(
    "GenreId" integer NOT NULL,
    "Name" character varying(120) COLLATE pg_catalog."default",
    CONSTRAINT "PK_Genre" PRIMARY KEY ("GenreId")
);

-- Crea la tabla "Invoice" (facturas), con referencias al cliente y datos de facturación
CREATE TABLE IF NOT EXISTS public."Invoice"
(
    "InvoiceId" integer NOT NULL,
    "CustomerId" integer NOT NULL,
    "InvoiceDate" timestamp without time zone NOT NULL,
    "BillingAddress" character varying(70) COLLATE pg_catalog."default",
    "BillingCity" character varying(40) COLLATE pg_catalog."default",
    "BillingState" character varying(40) COLLATE pg_catalog."default",
    "BillingCountry" character varying(40) COLLATE pg_catalog."default",
    "BillingPostalCode" character varying(10) COLLATE pg_catalog."default",
    "Total" numeric(10, 2) NOT NULL,
    CONSTRAINT "PK_Invoice" PRIMARY KEY ("InvoiceId")
);


-- Crea la tabla "InvoiceLine" (líneas de factura) con los detalles de cada compra
CREATE TABLE IF NOT EXISTS public."InvoiceLine"
(
    "InvoiceLineId" integer NOT NULL,
    "InvoiceId" integer NOT NULL,
    "TrackId" integer NOT NULL,
    "UnitPrice" numeric(10, 2) NOT NULL,
    "Quantity" integer NOT NULL,
    CONSTRAINT "PK_InvoiceLine" PRIMARY KEY ("InvoiceLineId")
);

-- Crea la tabla "MediaType" para los distintos formatos de medias.
CREATE TABLE IF NOT EXISTS public."MediaType"
(
    "MediaTypeId" integer NOT NULL,
    "Name" character varying(120) COLLATE pg_catalog."default",
    CONSTRAINT "PK_MediaType" PRIMARY KEY ("MediaTypeId")
);

-- Crea la tabla "Playlist" para las listas de reproducción
CREATE TABLE IF NOT EXISTS public."Playlist"
(
    "PlaylistId" integer NOT NULL,
    "Name" character varying(120) COLLATE pg_catalog."default",
    CONSTRAINT "PK_Playlist" PRIMARY KEY ("PlaylistId")
);

-- Crea la tabla de relación entre Playlist y Track (muchos a muchos)
CREATE TABLE IF NOT EXISTS public."PlaylistTrack"
(
    "PlaylistId" integer NOT NULL,
    "TrackId" integer NOT NULL,
    CONSTRAINT "PK_PlaylistTrack" PRIMARY KEY ("PlaylistId", "TrackId")
);

-- Crea la tabla "Track" con información de las canciones
CREATE TABLE IF NOT EXISTS public."Track"
(
    "TrackId" integer NOT NULL,
    "Name" character varying(200) COLLATE pg_catalog."default" NOT NULL,
    "AlbumId" integer,
    "MediaTypeId" integer NOT NULL,
    "GenreId" integer,
    "Composer" character varying(220) COLLATE pg_catalog."default",
    "Milliseconds" integer NOT NULL,
    "Bytes" integer,
    "UnitPrice" numeric(10, 2) NOT NULL,
    CONSTRAINT "PK_Track" PRIMARY KEY ("TrackId")
);


-- Crea claves foráneas (relaciones) e índices para optimizar búsquedas

-- Album -> Artist
ALTER TABLE IF EXISTS public."Album"
    ADD CONSTRAINT "FK_AlbumArtistId" FOREIGN KEY ("ArtistId")
    REFERENCES public."Artist" ("ArtistId") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS "IFK_AlbumArtistId"
    ON public."Album"("ArtistId");

-- Customer -> Employee
ALTER TABLE IF EXISTS public."Customer"
    ADD CONSTRAINT "FK_CustomerSupportRepId" FOREIGN KEY ("SupportRepId")
    REFERENCES public."Employee" ("EmployeeId") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS "IFK_CustomerSupportRepId"
    ON public."Customer"("SupportRepId");

	
-- Employee (auto-relación jerárquica)
ALTER TABLE IF EXISTS public."Employee"
    ADD CONSTRAINT "FK_EmployeeReportsTo" FOREIGN KEY ("ReportsTo")
    REFERENCES public."Employee" ("EmployeeId") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS "IFK_EmployeeReportsTo"
    ON public."Employee"("ReportsTo");

-- Invoice -> Customer
ALTER TABLE IF EXISTS public."Invoice"
    ADD CONSTRAINT "FK_InvoiceCustomerId" FOREIGN KEY ("CustomerId")
    REFERENCES public."Customer" ("CustomerId") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS "IFK_InvoiceCustomerId"
    ON public."Invoice"("CustomerId");


-- InvoiceLine -> Invoice
ALTER TABLE IF EXISTS public."InvoiceLine"
    ADD CONSTRAINT "FK_InvoiceLineInvoiceId" FOREIGN KEY ("InvoiceId")
    REFERENCES public."Invoice" ("InvoiceId") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS "IFK_InvoiceLineInvoiceId"
    ON public."InvoiceLine"("InvoiceId");

-- InvoiceLine -> Track
ALTER TABLE IF EXISTS public."InvoiceLine"
    ADD CONSTRAINT "FK_InvoiceLineTrackId" FOREIGN KEY ("TrackId")
    REFERENCES public."Track" ("TrackId") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS "IFK_InvoiceLineTrackId"
    ON public."InvoiceLine"("TrackId");


-- PlaylistTrack -> Playlist
ALTER TABLE IF EXISTS public."PlaylistTrack"
    ADD CONSTRAINT "FK_PlaylistTrackPlaylistId" FOREIGN KEY ("PlaylistId")
    REFERENCES public."Playlist" ("PlaylistId") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


-- PlaylistTrack -> Track
ALTER TABLE IF EXISTS public."PlaylistTrack"
    ADD CONSTRAINT "FK_PlaylistTrackTrackId" FOREIGN KEY ("TrackId")
    REFERENCES public."Track" ("TrackId") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS "IFK_PlaylistTrackTrackId"
    ON public."PlaylistTrack"("TrackId");


-- Track -> Album
ALTER TABLE IF EXISTS public."Track"
    ADD CONSTRAINT "FK_TrackAlbumId" FOREIGN KEY ("AlbumId")
    REFERENCES public."Album" ("AlbumId") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS "IFK_TrackAlbumId"
    ON public."Track"("AlbumId");

-- Track -> Album
ALTER TABLE IF EXISTS public."Track"
    ADD CONSTRAINT "FK_TrackGenreId" FOREIGN KEY ("GenreId")
    REFERENCES public."Genre" ("GenreId") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS "IFK_TrackGenreId"
    ON public."Track"("GenreId");

-- Track -> Genre
ALTER TABLE IF EXISTS public."Track"
    ADD CONSTRAINT "FK_TrackMediaTypeId" FOREIGN KEY ("MediaTypeId")
    REFERENCES public."MediaType" ("MediaTypeId") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS "IFK_TrackMediaTypeId"
    ON public."Track"("MediaTypeId");

-- Finaliza la transacción, aplicando todos los cambios
END;